#!/usr/bin/python

import argparse
import os
import socket
import re
import docker

def parse_arguments():
	class DefaultList(list):
		def __copy__(self):
			return []

	parser = argparse.ArgumentParser()
	parser.add_argument("--container", type=str, default="varnish", help="id or name of varnish container")
	parser.add_argument("--graph-storage-dir", type=str, default="/var/lib/docker", help="docker graph storage directory")
	parser.add_argument("--backends-file", type=str, default="/etc/varnish/docker_backends.vcl", help="output file for backends in container")
	parser.add_argument("--vhosts-file", type=str, default="/etc/varnish/docker_vhosts.vcl", help="output file for vhosts in container")
	parser.add_argument("--domain", type=str, default=DefaultList([socket.getfqdn()]), action="append", dest="domains", help="domain name to append to each host")
	parser.add_argument("--dry-run", action="store_true", help="only print to stdout instead of writing to file")

	return parser.parse_args()


def get_varnish_rootfs(args, client):
	inspect = client.inspect_container(args.container)
	
	return os.path.join(args.graph_storage_dir, "containers", inspect["ID"], "rootfs")


def get_docker_backends(args, client):
	containers = client.containers()

	backends = []
	for container in containers:
		inspect = client.inspect_container(container["Id"])
		name = inspect["Name"].lstrip("/")

		backend = {}
		backend["name"] = re.sub(r"[^\w]", "_", name) 
		backend["host"] = name
		backend["port"] = "80"
		backend["domains"] = set()
		backend["domains"].add(name)
		for domain in args.domains:
			backend["domains"].add(name + "." + domain)
	  	if inspect["Config"]["Hostname"]:
			backend["domains"].add(inspect["Config"]["Hostname"])

		backends.append(backend)

	return backends


def write_backends_file(args, rootfs, backends):
	output = "\n".join(["backend %(name)s { .host = \"%(host)s\"; .port = \"%(port)s\"; }" % backend for backend in backends])

	if args.dry_run:
		print output
	else:
		with open(os.path.normpath(os.sep.join([rootfs, args.backends_file])), "w") as f:
			f.write(output)
		print "Replaced varnish backends in %s" % args.backends_file


def write_vhosts_file(args, rootfs, vhosts):
	output = "sub vcl_recv {\n"
	output += "\n".join(["  else if (req.http.host ~ \"(?i)(%(re)s)$\") {\n    set req.backend = %(name)s;\n  }" % {"re": "|".join([re.escape(domain) for domain in vhost["domains"]]), "name": vhost["name"]} for vhost in vhosts]) 
	output += "\n  else {\n    error 404 \"Unknown virtual host\";\n  }\n}";

	# replace first else if with just if
	output = re.sub(r"else if", "if", output, 1)

	if args.dry_run:
		print output
	else:
		with open(os.path.normpath(os.sep.join([rootfs, args.vhosts_file])), "w") as f:
			f.write(output)
		print "Replaced varnish vhosts in %s" % args.vhosts_file


args = parse_arguments()
client = docker.Client()
rootfs = get_varnish_rootfs(args, client)
backends = get_docker_backends(args, client)
write_backends_file(args, rootfs, backends)
write_vhosts_file(args, rootfs, backends)

